---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-rh-sign-image-cosign-multiple-components
spec:
  description: Test signing multiple images by cosign
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        workspaces:
          - name: data
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:70be98cc78c9ef52526c4f2be437321aa943b516
            script: |
              #!/usr/bin/env bash
              set -eux
              _TEST_MANIFEST_LIST_REFERENCE="quay.io/redhat-pending/test-product----test-image0@sha256:1111"
              _TEST_MANIFEST_LIST_OCI_REFERENCE="quay.io/redhat-pending/test-product----test-image0@sha256:0000"
              _TEST_REPO="quay.io/redhat-pending/test-product----test-image0"

              cat > $(workspaces.data.path)/snapshot_spec.json << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp0",
                    "containerImage": "quay.io/redhat-user-workloads/test-product/test-image0@sha256:0000",
                    "repository": "quay.io/redhat-pending/test-product----test-image0",
                    "rh-registry-repo": "registry.stage.redhat.io/test-product/test-image0",
                    "registry-access-repo": "registry.access.stage.redhat.com/test-product/test-image0",
                    "tags": ["t1", "t2"]
                  },
                  {
                    "name": "comp1",
                    "containerImage": "quay.io/redhat-user-workloads/test-product/test-image1@sha256:1111",
                    "repository": "quay.io/redhat-pending/test-product----test-image1",
                    "rh-registry-repo": "registry.stage.redhat.io/test-product/test-image1",
                    "registry-access-repo": "registry.access.stage.redhat.com/test-product/test-image1",
                    "tags": ["t1", "t2"]
                  }
                ]
              }
              EOF

              cat > "$(workspaces.data.path)/signRegistryAccess.txt" << EOF
              test-product/test-image0
              EOF

              cat > "$(workspaces.data.path)/data.json" << EOF
              {
                "mapping": {
                  "defaults": {
                    "pushSourceContainer": "true"
                  }
                },
                "sign": {
                  "request": "cosign-signing-pipeline",
                  "requestType": "internal-request",
                  "configMapName": "signing-config-map"
                }
              }
              EOF
              cat > "$(workspaces.data.path)/release_plan_admission.json" << EOF
              {
                "spec": {
                  "pipeline": {
                    "pipelineRef": {
                      "resolver": "git",
                      "params": [
                        {
                          "name": "url",
                          "value": "https://localhost.git"
                        },
                        {
                          "name": "revision",
                          "value": "main"
                        },
                        {
                          "name": "pathInRepo",
                          "value": "pipelines/abc/abc.yaml"
                        }
                      ]
                    },
                    "serviceAccountName": "default"
                  }
                }
              }
              EOF
    - name: run-task
      taskRef:
        name: rh-sign-image-cosign
      params:
        - name: snapshotPath
          value: snapshot_spec.json
        - name: secretName
          value: 'test-cosign-secret-rekor'
        - name: signRegistryAccessPath
          value: signRegistryAccess.txt
        - name: releasePlanAdmissionPath
          value: "release_plan_admission.json"
        - name: dataPath
          value: data.json
        - name: taskGitRevision
          value: "main"
        - name: taskGitUrl
          value: "http://localhost"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        steps:
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:70be98cc78c9ef52526c4f2be437321aa943b516
            script: |
              #!/usr/bin/env bash
              set -eux
              echo "check results"
              _TEST_PUB_REPO1="registry.stage.redhat.io/test-product/test-image0"
              _TEST_PUB_REPO2="registry.access.stage.redhat.com/test-product/test-image0"
              _TEST_PUB_REPO3="registry.stage.redhat.io/test-product/test-image1"
              _TEST_REPO1="quay.io/redhat-pending/test-product----test-image0"
              _TEST_REPO2="quay.io/redhat-pending/test-product----test-image1"
              # shellcheck disable=SC2034
              foundReferences=()
              # shellcheck disable=SC2034
              foundDigests=()
              # shellcheck disable=SC2034
              foundIdentities=()
              while IFS= read -r name; do
                ir=$(kubectl get internalrequest "$name" -o json)
                params=$(jq -r ".spec.params" <<< "$ir")
                refValue=$(jq -r '.reference' <<< "${params}")
                digestValue=$(jq -r '.manifest_digest' <<< "${params}")
                identityValue=$(jq -r '.identity' <<< "${params}")
                echo "$params $refValue"
                foundReferences+=("${refValue}")
                foundDigests+=("${digestValue}")
                foundIdentities+=("${identityValue}")
              done < <(cat "$(workspaces.data.path)/mock_internal-request-names.txt")

              expectedReferences=()
              expectedReferences+=("${_TEST_REPO1}:t1")
              expectedReferences+=("${_TEST_REPO1}:t2")
              expectedReferences+=("${_TEST_REPO2}:t1")
              expectedReferences+=("${_TEST_REPO2}:t2")
              expectedDigests=()
              expectedDigests+=("sha256:1111")
              expectedDigests+=("sha256:1111-1")
              expectedDigests+=("sha256:1111-2")
              expectedDigests+=("sha256:1111-3")
              expectedIdentities=()
              expectedIdentities+=("${_TEST_PUB_REPO1}:t1")
              expectedIdentities+=("${_TEST_PUB_REPO1}:t2")
              expectedIdentities+=("${_TEST_PUB_REPO2}:t1")
              expectedIdentities+=("${_TEST_PUB_REPO2}:t2")
              expectedIdentities+=("${_TEST_PUB_REPO3}:t1")
              expectedIdentities+=("${_TEST_PUB_REPO3}:t2")

              echo "IR NAMES"

              differenceReferences=$(echo "${expectedReferences[@]}" "${foundReferences[@]}" | tr ' ' '\n' \
                | sort | uniq -u)

              if [ -n "${differenceReferences}" ] ; then
                echo "error: references expected compared to found do not match"
                echo ""
                echo "${differenceReferences}"
                exit 1
              fi
              differenceIdentities=$(echo "${expectedIdentities[@]}" "${foundIdentities[@]}" | tr ' ' '\n' \
                | sort | uniq -u)

              if [ -n "${differenceIdentities}" ] ; then
                echo "error: identities expected compared to found do not match"
                echo ""
                echo "${differenceIdentities}"
                exit 1
              fi
              differenceDigests=$(echo "${expectedDigests[@]}" "${foundDigests[@]}" | tr ' ' '\n' \
                | sort | uniq -u)

              if [ -n "${differenceDigests}" ] ; then
                echo "error: digests expected compared to found do not match"
                echo ""
                echo "${differenceDigests}"
                exit 1
              fi
      runAfter:
        - run-task
