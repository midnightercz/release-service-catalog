---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: rh-sign-image-cosign
  labels:
    app.kubernetes.io/version: "1.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Task to sign container images in snapshot by cosign
  params:
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
    - name: secretName
      description: Name of secret containing needed credentials
      type: string
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      type: string
    - name: signRegistryAccessPath
      type: string
      description: |
        The relative path in the workspace to a text file that contains a list of repositories
        that needs registry.access.redhat.com image references to be signed (i.e.
        requires_terms=true), one repository string per line, e.g. "rhtas/cosign-rhel9".
    - name: releasePlanAdmissionPath
      description: Path to the JSON string of the releasePlanAdmission in the data workspace
      type: string
    - name: taskGitUrl
      description: The url to the git repo where the release-service-catalog tasks to be used are stored
      default:
    - name: taskGitRevision
      description: The revision in the taskGitUrl repo to be used
    - name: pipelineRunUid
      description: The UID of the pipeline run
    - name: requestTimeout
      description: The timeout for the request
      default: "180"
    - name: concurrentLimit
      description: The number of concurrent requests to be made
      default: 16
  workspaces:
    - name: data
      description: Workspace to read and save files
  steps:
    - name: sign-image
      image: quay.io/konflux-ci/release-service-utils:70be98cc78c9ef52526c4f2be437321aa943b516
      script: |
        #!/usr/bin/env bash
        set -eux
        RUNNING_JOBS="\j" # Bash parameter for number of jobs currently running
        CONCURRENT_LIMIT=$(params.concurrentLimit)
        REQUEST_COUNT=0

        SNAPSHOT_PATH=$(workspaces.data.path)/$(params.snapshotPath)
        COMPONENTS_LENGTH=$(jq '.components |length' "${SNAPSHOT_PATH}")
        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        TASK_LABEL="internal-services.appstudio.openshift.io/group-id"
        TASK_ID=$(context.taskRun.uid)
        PIPELINERUN_LABEL="internal-services.appstudio.openshift.io/pipelinerun-uid"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi

        SIGN_REGISTRY_ACCESS_FILE=$(workspaces.data.path)/$(params.signRegistryAccessPath)
        if [ ! -f "${SIGN_REGISTRY_ACCESS_FILE}" ] ; then
            echo "No valid file was provided as signRegistryAccessPath."
            exit 1
        fi
        RPA_FILE="$(workspaces.data.path)/$(params.releasePlanAdmissionPath)"
        if [ ! -f "${RPA_FILE}" ] ; then
            echo "No valid rpa file was provided."
            exit 1
        fi
        REQUESTTYPE=$(jq -r '.sign.requestType // "internal-request"' "${DATA_FILE}")

        default_pipeline_image="quay.io/redhat-isv/operator-pipelines-images:released"
        pipeline_image=$(jq -r --arg default_pipeline_image ${default_pipeline_image} \
            '.sign.pipelineImage // $default_pipeline_image' "${DATA_FILE}")

        service_account_name=$(jq -r '.spec.pipeline.serviceAccountName // "appstudio-pipeline"' "${RPA_FILE}")
        if [ "${REQUESTTYPE}" == "internal-pipelinerun" ] ; then
          requestType=internal-pipelinerun
          defaultRequest="cosign-signing-pipeline"
          EXTRA_ARGS=(
          --task-git-url "$(params.taskGitUrl)"
          --task-git-revision "$(params.taskGitRevision)"
          --service-account "${service_account_name}"
          )
        else
          requestType=internal-request
          defaultRequest="hacbs-signing-pipeline"
          EXTRA_ARGS=()
        fi

        for (( COMPONENTS_INDEX=0; COMPONENTS_INDEX<COMPONENTS_LENGTH; COMPONENTS_INDEX++ )); do
            COMPONENT_NAME=$(jq -r ".components[${COMPONENTS_INDEX}].name" "${SNAPSHOT_PATH}")
            echo "Processing component ${COMPONENT_NAME}"

            # Get public image references
            INTERNAL_CONTAINER_REF=$(jq -r ".components[${COMPONENTS_INDEX}].repository" "${SNAPSHOT_PATH}")
            rh_registry_repo=$(jq -r ".components[${COMPONENTS_INDEX}][\"rh-registry-repo\"]" "${SNAPSHOT_PATH}")
            registry_access_repo=$(jq -r ".components[${COMPONENTS_INDEX}][\"registry-access-repo\"]" \
              "${SNAPSHOT_PATH}")
            repository="${rh_registry_repo#*/}"

            # Sign rh-registry-repo references (always) and registry-access-repo references
            # (only if signatures for this registry are required)
            REGISTRY_REFERENCES=("${rh_registry_repo}")
            if grep -q "^${repository}$" "${SIGN_REGISTRY_ACCESS_FILE}"; then
              REGISTRY_REFERENCES+=("${registry_access_repo}")
            fi

            # Check if image is manifest list
            BUILD_CONTAINER_IMAGE=$(jq -r ".components[${COMPONENTS_INDEX}].containerImage" "${SNAPSHOT_PATH}")
            DIGEST="${BUILD_CONTAINER_IMAGE/*@}"
            IMAGE=$(skopeo inspect --raw "docker://${BUILD_CONTAINER_IMAGE}")
            MEDIA_TYPE=$(echo "$IMAGE" | jq -r '.mediaType')
            TAGS=$(jq -r ".components[${COMPONENTS_INDEX}].tags|.[]" "${SNAPSHOT_PATH}")
            LIST=0
            if [ "$MEDIA_TYPE" = "application/vnd.docker.distribution.manifest.list.v2+json" ]; then LIST=1; fi
            if [ "$MEDIA_TYPE" = "application/vnd.oci.image.index.v1+json" ]; then LIST=1; fi

            request=$(jq --arg defaultRequest "${defaultRequest}" -r '.sign.request // $defaultRequest' "${DATA_FILE}")
            # Sign each manifest in manifest list
            if [ $LIST -eq 1 ]; then
                for REGISTRY_REF in "${REGISTRY_REFERENCES[@]}"; do
                    for MDIGEST in $(echo "$IMAGE" | jq -r '.manifests[]|.digest'); do
                        for TAG in $TAGS; do
                            while (( ${RUNNING_JOBS@P} >= "$CONCURRENT_LIMIT" )); do
                              wait -n
                            done
                            echo "Creating ${requestType} to sign image with tag ${TAG}:"
                            echo "- reference=${REGISTRY_REF}:${TAG}"
                            echo "- manifest_digest=${MDIGEST}"

                            ${requestType} -r "${request}" \
                              -p pipeline_image="${pipeline_image}" \
                              -p reference="${INTERNAL_CONTAINER_REF}:${TAG}" \
                              -p identity="${REGISTRY_REF}:${TAG}" \
                              -p manifest_digest="${MDIGEST}" \
                              -p secretName="$(params.secretName)" \
                              -p taskGitUrl="$(params.taskGitUrl)" \
                              -p taskGitRevision="$(params.taskGitRevision)" \
                              -p dataPath="$(params.dataPath)" \
                              -l ${TASK_LABEL}="${TASK_ID}" \
                              -l ${PIPELINERUN_LABEL}="$(params.pipelineRunUid)" \
                              -t "$(params.requestTimeout)" --pipeline-timeout "0h30m0s" --task-timeout "0h25m0s" \
                              "${EXTRA_ARGS[@]}" -s true &

                        done
                        ((++REQUEST_COUNT))
                        echo "Request Count: $REQUEST_COUNT"
                    done
                done
            fi

            # Sign manifest list itself or manifest if it's not list
            for REGISTRY_REF in "${REGISTRY_REFERENCES[@]}"; do
                for TAG in $TAGS; do
                    while (( ${RUNNING_JOBS@P} >= "$CONCURRENT_LIMIT" )); do
                      wait -n
                    done
                    echo "Creating ${requestType} to sign image with tag ${TAG}:"
                    echo "- reference=${REGISTRY_REF}:${TAG}"
                    echo "- manifest_digest=${DIGEST}"

                    ${requestType} -r "${request}" \
                      -p pipeline_image="${pipeline_image}" \
                      -p reference="${INTERNAL_CONTAINER_REF}:${TAG}" \
                      -p identity="${REGISTRY_REF}:${TAG}" \
                      -p manifest_digest="${DIGEST}" \
                      -p secretName="$(params.secretName)" \
                      -p taskGitUrl="$(params.taskGitUrl)" \
                      -p taskGitRevision="$(params.taskGitRevision)" \
                      -p dataPath="$(params.dataPath)" \
                      -l ${TASK_LABEL}="${TASK_ID}" \
                      -l ${PIPELINERUN_LABEL}="$(params.pipelineRunUid)" \
                      -t "$(params.requestTimeout)" --pipeline-timeout "0h30m0s" --task-timeout "0h25m0s" \
                      "${EXTRA_ARGS[@]}" -s true &
                done
            done
        done
        echo "Waiting for remaining processes to finish..."
        while (( ${RUNNING_JOBS@P} > 0 )); do
          wait -n
        done

        echo "done"
